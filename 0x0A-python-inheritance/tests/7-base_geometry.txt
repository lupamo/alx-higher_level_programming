importing class
================
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("mylist", 89)
>>> bg.integer_validator("controler", "mike")
Traceback (most recent call last):
	...
TypeError: controler must be an integer

>>> bg.integer_validator("someone", 0)
Traceback (most recent call last):
	...
ValueError: someone must be greater than 0

>>> bg.integer_validator("negative", -7)
Traceback (most recent call last):
	...
ValueError: negative must be greater than 0

>>> bg.integer_validator("float", 8.7)
Traceback (most recent call last):
	...
TypeError: float must be an integer

>>> bg.integer_validator("list", [89, 7, 6])
Traceback (most recent call last):
	...
TypeError: list must be an integer


>>> bg.integer_validator("boolee", True)
Traceback (most recent call last):
	...
TypeError: boolee must be an integer

>>> bg.integer_validator("Dict", {89: 'none', 7: 'occupied', 6: 'none'})
Traceback (most recent call last):
	...
TypeError: Dict must be an integer

>>> bg.integer_validator("tupler", (7, 6))
Traceback (most recent call last):
	...
TypeError: tupler must be an integer

>>> bg.integer_validator("aging", None)
Traceback (most recent call last):
	...
TypeError: aging must be an integer

Test area
>>> bg.area()
Traceback (most recent call last):
	...
Exception: area() is not implemented

>>> bg.integer_validator("width")
Traceback (most recent call last):
	...
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

